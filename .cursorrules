# Cursor 规则文档 - Laravel Vue 全栈项目

## 项目概述
这是一个现代化的全栈Web应用，采用Laravel 12 + Vue 3 + TypeScript + Inertia.js技术栈。

## 核心技术栈
- **后端框架**: Laravel 12 (PHP 8.2+)
- **前端框架**: Vue 3 + TypeScript + Composition API
- **全栈桥接**: Inertia.js
- **样式框架**: Tailwind CSS + UnoCSS
- **构建工具**: Vite
- **认证系统**: Laravel Breeze + Sanctum
- **权限管理**: Spatie Laravel Permission
- **路由工具**: Ziggy
- **国际化**: 中英文双语支持
- **测试框架**: PHPUnit

## 编码风格规范

### Laravel/PHP 规范
- 严格遵循PSR-12编码标准
- 使用Laravel约定和最佳实践
- Controller保持精简，业务逻辑放入Service层
- 优先使用Eloquent ORM和Laravel内置功能
- 使用Form Request进行数据验证
- 路由命名遵循RESTful约定
- 使用Laravel的Queue、Cache、Event等功能

### Vue/TypeScript 规范
- 必须使用Vue 3 Composition API
- 优先采用`<script setup>`语法糖
- 组件命名采用PascalCase
- 所有props和events必须有明确类型定义
- 启用严格的TypeScript类型检查
- 组件结构: template -> script setup -> style

### 文件和目录命名规范
**目录命名规则 (一律使用 camelCase):**
- ✅ 正确: `components/`, `pages/`, `layouts/`, `stores/`, `composables/`
- ❌ 错误: `Components/`, `Pages/`, `Layouts/`, `Stores/`, `Composables/`

**文件命名规则:**
- **Vue组件文件**: 使用 PascalCase
  - ✅ 正确: `UserProfile.vue`, `BaseButton.vue`, `AppHeader.vue`
  - ❌ 错误: `userProfile.vue`, `baseButton.vue`, `app-header.vue`
- **TypeScript/JavaScript文件**: 使用 camelCase
  - ✅ 正确: `useAuth.ts`, `gameHelper.ts`, `apiClient.ts`
  - ❌ 错误: `UseAuth.ts`, `GameHelper.ts`, `api-client.ts`
- **样式文件**: 使用 kebab-case
  - ✅ 正确: `app.css`, `custom-styles.css`

**组件命名约定:**
- **基础组件**: `Base` 前缀 (如 `BaseButton.vue`, `BaseCard.vue`)
- **单例组件**: `The` 前缀 (如 `TheHeader.vue`, `TheSidebar.vue`)
- **紧密耦合子组件**: 父组件名作为前缀 (如 `UserList.vue`, `UserListItem.vue`)

### 组件使用规范
- **全局注册组件**: 使用kebab-case命名
  - Naive UI组件：`<n-card>`, `<n-button>`, `<n-data-table>`
  - 自定义全局组件：`<custom-component>`, `<my-widget>`
- **局部导入组件**: 使用PascalCase命名
  - 导入后使用：`<CustomComponent>`, `<MyWidget>`
- **导入规则**:
  - ❌ 不要导入已全局注册的组件
  - ✅ 只导入局部使用的组件和composables
  - ✅ Naive UI只导入composables：`import { useMessage, useDialog } from 'naive-ui'`
- **常用Naive UI Composables**: `useMessage`, `useDialog`, `useNotification`, `useLoadingBar`
- **Layout要求**: 确保页面使用包含所有providers的`DefaultLayout`

### 目录结构约定
**后端目录:**
- Controllers: `app/Http/Controllers/`
- Models: `app/Models/`
- Requests: `app/Http/Requests/`
- Middleware: `app/Http/Middleware/`
- Services: `app/Services/`

**前端目录:**
- Pages: `resources/js/pages/`
- Components: `resources/js/components/`
- Layouts: `resources/js/layouts/`
- Types: `resources/js/types/`
- Stores: `resources/js/stores/`
- Composables: `resources/js/composables/`
- Utils: `resources/js/utils/`

## 开发工作流程

### 功能开发流程
1. **后端开发**: Migration → Model → Controller → Request → Route
2. **前端开发**: Page组件 → 类型定义 → UI逻辑实现
3. **前后端连接**: Inertia.js数据传递
4. **测试编写**: Feature测试 + Unit测试

### 认证权限处理
- 基于Laravel Breeze认证系统
- 使用Spatie Permission进行权限管理
- 前端路由通过Inertia中间件保护
- API接口使用Sanctum令牌认证

### 国际化处理
- 翻译文件: `resources/js/locales/`
- 支持语言: 中文(zh-CN) + 英文(en)
- 前端使用vue-i18n国际化库

## 代码质量要求
- **类型安全**: 全面使用TypeScript类型定义
- **组件设计**: Props接口清晰，考虑复用性
- **错误处理**: 前后端完整的错误处理机制
- **表单验证**: 前后端验证规则保持同步
- **性能优化**: 数据库查询和前端渲染优化
- **代码注释**: 复杂逻辑必须有清晰注释

## 常用开发命令
```bash
# 启动开发环境(包含服务器、队列、日志、前端)
composer run dev

# 运行测试套件
composer run test

# PHP代码格式化
php artisan pint

# 前端构建
npm run build

# 数据库迁移
php artisan migrate

# 清理缓存
php artisan optimize:clear
```

## 开发注意事项
- ✅ 优先使用框架内置解决方案
- ✅ 新功能必须考虑权限控制
- ✅ 数据库操作注意性能优化
- ✅ 组件设计考虑可复用性
- ✅ 遵循Laravel和Vue最佳实践
- ✅ 提交前必须通过测试
- ✅ API接口要有完整的类型定义
- ✅ 错误处理要用户友好

## 调试和监控
- **后端日志**: Laravel Pail实时日志监控
- **前端开发**: Vite热重载 + 浏览器DevTools
- **性能监控**: Laravel Telescope(如已安装)
- **API调试**: 使用Postman或内置测试
